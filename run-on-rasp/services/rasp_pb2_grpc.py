# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import services.rasp_pb2 as rasp__pb2


class RaspStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetState = channel.unary_unary(
                '/rasp.Rasp/GetState',
                request_serializer=rasp__pb2.Empty.SerializeToString,
                response_deserializer=rasp__pb2.State.FromString,
                )


class RaspServicer(object):
    """Missing associated documentation comment in .proto file"""

    def GetState(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RaspServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetState,
                    request_deserializer=rasp__pb2.Empty.FromString,
                    response_serializer=rasp__pb2.State.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rasp.Rasp', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Rasp(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def GetState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rasp.Rasp/GetState',
            rasp__pb2.Empty.SerializeToString,
            rasp__pb2.State.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
